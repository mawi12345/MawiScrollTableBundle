// Generated by CoffeeScript 1.3.3
(function() {
  var $, ScrollTable,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  $ = jQuery;

  ScrollTable = (function() {

    function ScrollTable(options) {
      var defaults,
        _this = this;
      this.options = options;
      this.delRow = __bind(this.delRow, this);

      this.cleanup = __bind(this.cleanup, this);

      this.addRow = __bind(this.addRow, this);

      this.loadRows = __bind(this.loadRows, this);

      this.scroll = __bind(this.scroll, this);

      this.refresh = __bind(this.refresh, this);

      this.addRowParam = __bind(this.addRowParam, this);

      this.addOrderByParam = __bind(this.addOrderByParam, this);

      this.addArrayParm = __bind(this.addArrayParm, this);

      this.addFilterParam = __bind(this.addFilterParam, this);

      defaults = {
        debug: true,
        view: {
          start: 0,
          end: 0,
          distance: 60
        },
        reload: {
          last: -1000,
          min: 10
        },
        clean: {
          distance: 120
        },
        orderBy: [],
        filter: {}
      };
      this.settings = $.extend(defaults, options);
      this.el = this.settings.el;
      this.loading = false;
      this.name = this.el.attr('data-scrolltable');
      this.infoUrl = Routing.generate('scrolltable_info', {
        'name': this.name
      });
      this.rowsUrl = Routing.generate('scrolltable_rows', {
        'name': this.name
      });
      this.settings.lineHeight = this.el.find('.row:first').outerHeight();
      this.resize(function() {
        _this.fill();
        _this.scroll();
        return $(window).on('scroll', _this.scroll);
      });
    }

    ScrollTable.prototype.log = function(msg) {
      if (this.settings.debug) {
        return typeof console !== "undefined" && console !== null ? console.log(msg) : void 0;
      }
    };

    ScrollTable.prototype.addFilterParam = function(string) {
      var key, value, _ref;
      _ref = this.settings.filter;
      for (key in _ref) {
        value = _ref[key];
        if (string !== '') {
          string += '&';
        }
        string += 'f[\'' + key + '\']=' + value;
      }
      return string;
    };

    ScrollTable.prototype.addArrayParm = function(string, key, array) {
      var value, _i, _len;
      for (_i = 0, _len = array.length; _i < _len; _i++) {
        value = array[_i];
        if (string !== '') {
          string += '&';
        }
        string += key + '[]=' + value;
      }
      return string;
    };

    ScrollTable.prototype.addOrderByParam = function(string) {
      return this.addArrayParm(string, 'o', this.settings.orderBy);
    };

    ScrollTable.prototype.addRowParam = function(string, items) {
      return this.addArrayParm(string, 'r', items);
    };

    ScrollTable.prototype.info = function(callback) {
      var _this = this;
      return $.ajax({
        url: this.infoUrl,
        data: this.addFilterParam(''),
        type: 'POST',
        dataType: 'xml',
        success: function(info) {
          return callback({
            rows: $(info).find('rc').text()
          });
        }
      });
    };

    ScrollTable.prototype.resize = function(callback) {
      var _this = this;
      return this.info(function(info) {
        _this.settings.rows = info.rows * 1;
        _this.el.height(info.rows * _this.settings.lineHeight + 'px');
        return callback();
      });
    };

    ScrollTable.prototype.refresh = function() {
      var _this = this;
      return this.resize(function() {
        _this.el.find('.row').remove();
        _this.el.find('.space').remove().first().appendTo(_this.el);
        _this.fill();
        _this.settings.reload.last = -1000;
        _this.settings.view.start = 0;
        _this.settings.view.end = 0;
        return _this.scroll();
      });
    };

    ScrollTable.prototype.fill = function() {
      var footerSpaceSize, nextsmaller, p, pos, row, rows, space, _i, _j, _len, _len1, _ref;
      rows = this.el.find('.row');
      space = this.el.find('.space').detach().first();
      this.settings.positions = [];
      for (_i = 0, _len = rows.length; _i < _len; _i++) {
        row = rows[_i];
        pos = $(row).attr('data-pos') * 1;
        nextsmaller = -1;
        _ref = this.settings.positions;
        for (_j = 0, _len1 = _ref.length; _j < _len1; _j++) {
          p = _ref[_j];
          if (p < pos) {
            nextsmaller = p;
          }
        }
        this.settings.positions.push(pos);
        if (nextsmaller < 0 && pos > 0) {
          $(row).before(space.clone().height(pos * this.settings.lineHeight + 'px'));
        }
        if (nextsmaller > 0 && (nextsmaller + 1) < pos) {
          $(row).before(space.clone().height((pos - nextsmaller - 1) * this.settings.lineHeight + 'px'));
        }
      }
      if (this.settings.positions.length > 0) {
        footerSpaceSize = this.settings.rows - this.settings.positions[this.settings.positions.length - 1] - 1;
      } else {
        footerSpaceSize = this.settings.rows;
      }
      if (footerSpaceSize > 0) {
        return this.el.append(space.clone().height((footerSpaceSize * this.settings.lineHeight) + 'px'));
      }
    };

    ScrollTable.prototype.pixelToRow = function(pixel) {
      return Math.floor(pixel / this.settings.lineHeight);
    };

    ScrollTable.prototype.scroll = function() {
      var endrow, startrow, viewheight, viewtop;
      if (this.loading === true) {
        return false;
      }
      viewtop = $(document).scrollTop() - this.el.position().top;
      if (Math.abs(this.settings.reload.last - viewtop) < (this.settings.reload.min * this.settings.lineHeight)) {
        return false;
      }
      this.settings.reload.last = viewtop;
      viewheight = $(window).height();
      startrow = this.pixelToRow(viewtop) - this.settings.view.distance;
      endrow = this.pixelToRow(viewtop + viewheight) + this.settings.view.distance;
      if (startrow < 0) {
        startrow = 0;
      }
      if (endrow >= this.settings.rows) {
        endrow = this.settings.rows - 1;
      }
      if (this.settings.view.start !== startrow || this.settings.view.end !== endrow) {
        this.loading = true;
        this.settings.view.start = startrow;
        this.settings.view.end = endrow;
        this.loadRows(startrow, endrow);
        return true;
      }
      return false;
    };

    ScrollTable.prototype.loadRows = function(start, end) {
      var items, params, range, _i, _results,
        _this = this;
      range = (function() {
        _results = [];
        for (var _i = start; start <= end ? _i <= end : _i >= end; start <= end ? _i++ : _i--){ _results.push(_i); }
        return _results;
      }).apply(this);
      items = $.grep(range, function(item) {
        if ($.inArray(item, _this.settings.positions) < 0) {
          return 1;
        } else {
          return 0;
        }
      });
      if (items.length < 1) {
        this.loading = false;
        return;
      }
      params = '';
      params = this.addRowParam(params, items);
      params = this.addFilterParam(params);
      params = this.addOrderByParam(params);
      return $.ajax({
        url: this.rowsUrl,
        data: params,
        type: 'POST',
        dataType: 'html',
        success: function(response) {
          var row, rows, _j, _len;
          rows = $(response).find('.row');
          for (_j = 0, _len = rows.length; _j < _len; _j++) {
            row = rows[_j];
            _this.addRow(row);
          }
          _this.loading = false;
          if (_this.settings.clean.distance > 0) {
            _this.cleanup(start, end);
          }
          _this.fill();
          return _this.scroll();
        }
      });
    };

    ScrollTable.prototype.addRow = function(row) {
      var distance, i, min, minpos, p, pos, _i, _len, _ref;
      pos = $(row).attr('data-pos') * 1;
      if (this.settings.positions.length === 0) {
        this.el.append(row);
        this.settings.positions.push(pos);
      }
      min = minpos = this.settings.rows;
      _ref = this.settings.positions;
      for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
        p = _ref[i];
        if (p === pos) {
          continue;
        }
        distance = Math.abs(p - pos);
        if (distance < min) {
          min = distance;
          minpos = p;
        }
        if (distance <= 1 || p > pos) {
          break;
        }
      }
      if (minpos < pos) {
        $(row).insertAfter('[data-pos="' + minpos + '"]');
        return this.settings.positions.splice(minpos, 0, pos);
      } else {
        $(row).insertBefore('[data-pos="' + minpos + '"]');
        return this.settings.positions.splice(minpos - 1, 0, pos);
      }
    };

    ScrollTable.prototype.cleanup = function(start, end) {
      var cleanend, cleanstart, pos, _i, _len, _ref, _results;
      cleanstart = start - this.settings.clean.distance;
      cleanend = end + this.settings.clean.distance;
      _ref = this.settings.positions;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        pos = _ref[_i];
        if (cleanstart > 0) {
          if (pos < cleanstart) {
            this.delRow(pos);
          }
        }
        if (cleanend < this.settings.rows) {
          if (pos > cleanend) {
            _results.push(this.delRow(pos));
          } else {
            _results.push(void 0);
          }
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };

    ScrollTable.prototype.delRow = function(pos) {
      return $('[data-pos="' + pos + '"]').remove();
    };

    return ScrollTable;

  })();

  $(function() {
    $.fn.extend({
      scrollTable: function(options) {
        return $(this).each(function() {
          return $(this).data('ScrollTable', new ScrollTable($.extend({
            el: $(this)
          }, options)));
        });
      }
    });
    return $('[data-scrolltable]').scrollTable();
  });

}).call(this);
