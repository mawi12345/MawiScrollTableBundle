// Generated by CoffeeScript 1.4.0
(function() {
  var $, Connector, ScrollTable, SymfonyJqueryAjaxConnector,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  $ = jQuery;

  Connector = (function() {

    function Connector(name, loading) {
      this.name = name;
      this.loading = loading;
    }

    Connector.prototype.setup = function(fail, done) {
      return done();
    };

    Connector.prototype.info = function(filter, fail, done) {
      this.loading(true);
      this.loading(false);
      return done({
        rows: 0,
        pagesize: 20
      });
    };

    Connector.prototype.page = function(filter, order, number, fail, done) {
      this.loading(true);
      this.loading(false);
      return done('');
    };

    return Connector;

  })();

  SymfonyJqueryAjaxConnector = (function(_super) {

    __extends(SymfonyJqueryAjaxConnector, _super);

    function SymfonyJqueryAjaxConnector(name, loading) {
      this.name = name;
      this.loading = loading;
    }

    SymfonyJqueryAjaxConnector.prototype.info = function(filter, fail, done) {
      var rurl,
        _this = this;
      this.loading(true);
      rurl = Routing.generate('scrolltable_info', {
        'name': this.name
      });
      return $.ajax({
        url: rurl,
        type: 'GET',
        dataType: 'xml',
        success: function(info) {
          _this.loading(false);
          return done({
            pages: $(info).find('pc').text() * 1
          });
        },
        error: function() {
          _this.loading(false);
          return fail();
        }
      });
    };

    SymfonyJqueryAjaxConnector.prototype.page = function(filter, order, number, fail, done) {
      var rurl,
        _this = this;
      this.loading(true);
      if (order.length <= 0) {
        order = 'default';
      }
      rurl = Routing.generate('scrolltable_page', {
        'name': this.name,
        'number': number,
        'order': order,
        'filter': filter
      });
      return $.ajax({
        url: rurl,
        type: 'GET',
        dataType: 'html',
        success: function(response) {
          var page;
          page = $(response);
          _this.loading(false);
          return done(page);
        },
        error: function() {
          _this.loading(false);
          return fail();
        }
      });
    };

    return SymfonyJqueryAjaxConnector;

  })(Connector);

  ScrollTable = (function() {

    function ScrollTable(options) {
      var defaults,
        _this = this;
      this.options = options;
      this.trigger = __bind(this.trigger, this);

      this.delPage = __bind(this.delPage, this);

      this.cleanup = __bind(this.cleanup, this);

      this.addPage = __bind(this.addPage, this);

      this.loadPages = __bind(this.loadPages, this);

      this.scroll = __bind(this.scroll, this);

      this.refresh = __bind(this.refresh, this);

      this.page = __bind(this.page, this);

      this.info = __bind(this.info, this);

      this.connectorLoadingStateChange = __bind(this.connectorLoadingStateChange, this);

      this.errorHandler = __bind(this.errorHandler, this);

      this.log = __bind(this.log, this);

      this.resetState = __bind(this.resetState, this);

      defaults = {
        debug: false,
        selector: {
          page: '.st-page',
          space: '.st-space'
        },
        distance: 5,
        clean: 8,
        order: '',
        filter: ''
      };
      this.settings = $.extend(defaults, options);
      this.el = this.settings.el;
      this.initState = {
        pages: 0,
        pageHeight: 0,
        last: -10000,
        pages: [],
        viewStartPage: 0,
        viewEndPage: 0,
        needCleanup: false,
        needFill: false,
        needScroll: false
      };
      this.state = {};
      this.resetState();
      this.connectorLoading = false;
      this.connections = 0;
      this.name = this.el.attr('data-scrolltable');
      this.connector = new SymfonyJqueryAjaxConnector(this.name, this.connectorLoadingStateChange);
      this.log('page height: ' + this.state.pageHeight);
      this.connector.setup(this.errorHandler, function() {
        _this.log('connector finished setup');
        return _this.resize(function() {
          _this.fill();
          $(window).on('scroll', _this.scroll);
          return _this.scroll();
        });
      });
    }

    ScrollTable.prototype.resetState = function() {
      var key;
      for (key in this.initState) {
        this.state[key] = this.initState[key];
      }
      return this.state.pageHeight = this.el.find(this.settings.selector.page).first().outerHeight();
    };

    ScrollTable.prototype.log = function(msg) {
      if (this.settings.debug) {
        return typeof console !== "undefined" && console !== null ? console.log(msg) : void 0;
      }
    };

    ScrollTable.prototype.errorHandler = function() {
      return this.log('ERROR');
    };

    ScrollTable.prototype.connectorLoadingStateChange = function(state) {
      if (state) {
        this.connections++;
      } else {
        this.connections--;
      }
      if (this.connections <= 0 && this.connectorLoading) {
        this.log('connector has finished loading');
        this.trigger('loading', false);
        this.connectorLoading = false;
        if (this.state.needCleanup) {
          this.state.needCleanup = false;
          this.cleanup();
        }
        if (this.state.needFill) {
          this.state.needFill = false;
          this.fill();
        }
        if (this.state.needScroll) {
          this.state.needScroll = false;
          return this.scroll();
        }
      } else if (this.connections > 0 && !this.connectorLoading) {
        this.log('connector is loading');
        this.trigger('loading', true);
        return this.connectorLoading = true;
      }
    };

    ScrollTable.prototype.info = function(done) {
      return this.connector.info(this.settings.filter, this.errorHandler, done);
    };

    ScrollTable.prototype.page = function(number, done) {
      return this.connector.page(this.settings.filter, this.settings.order, number, this.errorHandler, done);
    };

    ScrollTable.prototype.resize = function(done) {
      var _this = this;
      return this.info(function(info) {
        _this.log(info);
        _this.state.pages = info.pages;
        _this.el.height(info.pages * _this.state.pageHeight + 'px');
        _this.log(_this.state);
        return done();
      });
    };

    ScrollTable.prototype.refresh = function() {
      var _this = this;
      this.resetState();
      return this.resize(function() {
        _this.el.find(_this.settings.selector.page).remove();
        _this.el.find(_this.settings.selector.space).remove().first().appendTo(_this.el);
        _this.fill();
        return _this.scroll();
      });
    };

    ScrollTable.prototype.fill = function() {
      var footerSpaceSize, nextsmaller, p, page, pages, pos, space, _i, _j, _len, _len1, _ref;
      pages = this.el.find(this.settings.selector.page);
      space = this.el.find(this.settings.selector.space).detach().first();
      this.state.positions = [];
      for (_i = 0, _len = pages.length; _i < _len; _i++) {
        page = pages[_i];
        pos = $(page).attr('data-p') * 1;
        nextsmaller = -1;
        _ref = this.state.positions;
        for (_j = 0, _len1 = _ref.length; _j < _len1; _j++) {
          p = _ref[_j];
          if (p < pos) {
            nextsmaller = p;
          }
        }
        this.state.positions.push(pos);
        if (nextsmaller < 0 && pos > 0) {
          $(page).before(space.clone().height(pos * this.state.pageHeight + 'px'));
        }
        if (nextsmaller > 0 && (nextsmaller + 1) < pos) {
          $(page).before(space.clone().height((pos - nextsmaller - 1) * this.state.pageHeight + 'px'));
        }
      }
      if (this.state.positions.length > 0) {
        footerSpaceSize = this.state.pages - this.state.positions[this.state.positions.length - 1] - 1;
      } else {
        footerSpaceSize = this.state.pages;
      }
      if (footerSpaceSize > 0) {
        return this.el.append(space.clone().height((footerSpaceSize * this.state.pages) + 'px'));
      }
    };

    ScrollTable.prototype.pixelToPage = function(pixel) {
      return Math.floor(pixel / this.state.pageHeight);
    };

    ScrollTable.prototype.scroll = function() {
      var endPage, startPage, viewHeight, viewtop;
      if (this.connectorLoading === true) {
        this.state.needScroll = true;
        return false;
      }
      viewtop = $(document).scrollTop() - this.el.position().top;
      viewHeight = window.innerHeight;
      this.state.viewStartPage = this.pixelToPage(viewtop);
      this.state.viewEndPage = this.pixelToPage(viewtop + viewHeight);
      if (this.state.viewStartPage < 0) {
        this.state.viewStartPage = 0;
      }
      if (this.state.viewEndPage >= this.settings.pages) {
        this.state.viewEndPage = this.state.pages - 1;
      }
      if (Math.abs(this.state.last - viewtop) < (this.settings.distance * this.state.pageHeight)) {
        return false;
      }
      this.state.last = viewtop;
      startPage = this.state.viewStartPage - this.settings.distance;
      endPage = this.state.viewEndPage + this.settings.distance;
      if (startPage < 0) {
        startPage = 0;
      }
      if (endPage >= this.state.pages) {
        endPage = this.state.pages - 1;
      }
      this.loadPages(startPage, endPage);
      return true;
    };

    ScrollTable.prototype.loadPages = function(start, end) {
      var items, num, range, _i, _j, _len, _results, _results1,
        _this = this;
      this.log('load pages: ' + start + ' - ' + end);
      range = (function() {
        _results = [];
        for (var _i = start; start <= end ? _i <= end : _i >= end; start <= end ? _i++ : _i--){ _results.push(_i); }
        return _results;
      }).apply(this);
      items = $.grep(range, function(item) {
        if ($.inArray(item, _this.state.positions) < 0) {
          return 1;
        } else {
          return 0;
        }
      });
      if (items.length < 1) {
        return false;
      }
      this.state.needCleanup = true;
      _results1 = [];
      for (_j = 0, _len = items.length; _j < _len; _j++) {
        num = items[_j];
        _results1.push(this.page(num, function(page) {
          _this.addPage(page);
          return _this.fill();
        }));
      }
      return _results1;
    };

    ScrollTable.prototype.addPage = function(page) {
      var distance, i, min, minpos, p, pos, _i, _len, _ref;
      pos = $(page).attr('data-p') * 1;
      if (this.state.positions.length === 0) {
        this.el.append(page);
        this.state.positions.push(pos);
        return true;
      }
      min = minpos = this.state.pages;
      _ref = this.state.positions;
      for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
        p = _ref[i];
        if (p === pos) {
          continue;
        }
        distance = Math.abs(p - pos);
        if (distance < min) {
          min = distance;
          minpos = p;
        }
        if (distance <= 1 || p > pos) {
          break;
        }
      }
      this.delPage(pos);
      if (minpos < pos) {
        $(page).insertAfter('[data-p="' + minpos + '"]');
        return this.state.positions.splice(minpos, 0, pos);
      } else {
        $(page).insertBefore('[data-p="' + minpos + '"]');
        return this.state.positions.splice(minpos - 1, 0, pos);
      }
    };

    ScrollTable.prototype.cleanup = function() {
      var cleanend, cleanstart, pos, _i, _len, _ref, _results;
      cleanstart = this.state.viewStartPage - this.settings.clean;
      cleanend = this.state.viewEndPage + this.settings.clean;
      if (cleanstart < 0) {
        cleanstart = 0;
      }
      if (cleanend >= this.settings.pages) {
        cleanend = this.state.pages - 1;
      }
      _ref = this.state.positions;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        pos = _ref[_i];
        if (cleanstart > 0) {
          if (pos < cleanstart) {
            this.delPage(pos);
          }
        }
        if (cleanend < this.state.pages) {
          if (pos > cleanend) {
            _results.push(this.delPage(pos));
          } else {
            _results.push(void 0);
          }
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };

    ScrollTable.prototype.delPage = function(pos) {
      return $('[data-p="' + pos + '"]').remove();
    };

    ScrollTable.prototype.trigger = function(event, data) {
      return this.settings.el.trigger(event, data);
    };

    return ScrollTable;

  })();

  $(function() {
    $.fn.extend({
      scrollTable: function(options) {
        return $(this).each(function() {
          return $(this).data('ScrollTable', new ScrollTable($.extend({
            el: $(this)
          }, options)));
        });
      }
    });
    return $('[data-scrolltable]').scrollTable();
  });

}).call(this);
